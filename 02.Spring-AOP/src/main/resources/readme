Концепции АОП
- Точки соединения. Точка соединения (Joinpoint) - это четко определенная точка во время выполнения приложения. Типовые
  примеры точек соединения включают обращение к методу, собственно вызов метода (Method Invocation), инициализацию
  класса и создание экземпляра объекта. Точки соединения являются ключевой концепцией АОП и определяют места в
  приложении, в которые можно вставлять дополнительную логику с применением АОП.

- Советы. Фрагмент кода, который должен выполняться в отдельной точке соединения, представляет собой совет (advice),
  определенный методом в классе. Существует много типов советов, среди которых перед, когда совет выполняется до точки
  соединения, и после, когда совет выполняется после точки соединения.

- Срезы. Срез (pointcut) - это коллекция точек соединения, которая используется для определения ситуации, когда совет
  должен быть выполнен. Создавая срезы, вы получаете точный контроль над тем, как применять совет к компонентам
  приложения. Как упоминалось ранее, типичной точкой соединения является вызов метода или коллекция всех вызовов методов
  в отдельном классе. Часто между срезами можно устанавливать сложные отношения, чтобы дополнительно  ограничить то,
  когда будет выполнен совет.

- Аспекты. Аспект (aspect) - это комбинация совета и срезов, инкапсулированных в классе. Такая комбинация дает в
  результате определение логики, которая должна   быть включена в приложение, и указание мест, где она должна выполняться.

- Связывание. Связывание (weaving) представляет собой процесс вставки аспектов в определенную точку внутри кода приложения.
  Для решений АОП времени компиляции связывание обычно делается на этапе сборки.

- Цель. Цель (target) - это объект, поток выполнения которого изменяется каким-то процессом АОП. На целевой объект часто
  ссылаются как на объект, снабженный советом.

- Введение. Введение (introduction) представляет собой процесс, посредством которого можно изменить структуру объекта за
  счет помещения в него дополнительных методов или полей. Введение АОП можно использовать для обеспечения реализации любым
  объектом определенного интерфейса без необходимости в том, чтобы класс этого объекта реализовывал такой интерфейс явно.

Типы советов в Spring
************************************************************************************************************************
* Название совета       * Описание                                                                                     *
************************************************************************************************************************
* Перед (before)        * Используя совет "перед", можно осуществлять специальную обработку перед входом в точку       *
*                       * соединения. Поскольку в Spring точка соединения - всегда вызов метода, по существу это       *
*                       * позволяет реализовать предварительную обработку до выполнения метода. Совет "перед" имеет    *
*                       * полный доступ к цели вызова метода, а также к аргументам, переданным методу, но не обладает  *
*                       * никаким контролем над выполнением самого метода. В случае если совет "перед" генерирует      *
*                       * исключение, дальнейшее выполнение цепочки перехватчиков (а также целевого метода)            *
*                       * прекращается, и исключение распространяется обратно по цепочке перехватчиков                 *
************************************************************************************************************************
* После возврата        * Совет "после возврата" выполняется после завершения выполнения вызова метода в точке         *
* (after returning)     * соединения и возврата значения. Совет "после возврата" имеет доступ к цели вызова метода,    *
*                       * к аргументам, переданным методу, а также к возвращаемому значению. Поскольку когда           *
*                       * вызывается совет этого типа, метод уже выполнен, совет не имеет никакого контроля над вызовом*
*                       * метода. Если целевой метод генерирует исключение, совет "после возврата" выполняться не      *
*                       * будет, а исключение распространится вверх по стеку вызовов обычным образом                   *
************************************************************************************************************************
* После(after(finally)) * Совет "после возврата" выполняется только в случае нормального завершения метода, снабженного*
*                       * советом. Однако совет "после" будет выполняться вне зависимости от результата метода,        *
*                       * этим советом. Совет данного типа выполняется, даже когда метод,  снабженный советом, дает    *
*                       * сбой или когда генерируется исключение                                                       *
************************************************************************************************************************
* Вокруг (around)       * В Spring совет "вокруг" моделируется с использованием стандарта Альянса АОП для nерехватчика *
*                       * метода. Совету разрешено выполняться перед и после вызова метода, и есть возможность         *
*                       * управления точкой, в которой вызов метода может быть продолжен. При необходимости можно      *
*                       * вообще пропустить выполнение метода, предоставив собственную реализацию его логики           *
************************************************************************************************************************
* Перехват(throws)      * Совет "перехват" выполняется после возврата из вызова метода, но только в случае, если во    *
*                       * время вызова было сгенерировано исключение. Совет этого типа может перехватывать только      *
*                       * специфичные исключения, и тогда возможен доступ к методу, сгенерировавшему исключение, к     *
*                       * аргументам, переданным вызову, и к цели вызова                                               *
************************************************************************************************************************
* Введение              * Платформа Spring моделирует введения как специальные типы перехватчиков. Используя           *
* (introduction)        * перехватчик введения, можно указать реализацию методов, которые должны быть введены советом  *
************************************************************************************************************************